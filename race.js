// Generated by CoffeeScript 1.10.0
var Character, Game,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Game = (function() {
  Game.car = null;

  Game.$gameBox = null;

  Game.timer = null;

  Game.timeInterval = 1000;

  function Game() {
    this.generateEnemy = bind(this.generateEnemy, this);
    this.initGame();
  }

  Game.prototype.$ = function(s) {
    return this.$gameBox.find(s);
  };

  Game.prototype.initGame = function() {
    this.$gameBox = $('#gameBox');
    this.car = new Character(this.$gameBox, this);
    this.timeInterval = 1000;
    return this.initTimer();
  };

  Game.prototype.initTimer = function() {
    return this.timer = setTimeout(this.generateEnemy, 2000);
  };

  Game.prototype.generateEnemy = function() {
    this.timer = setTimeout(this.generateEnemy, this.timeInterval);
    return this.timeInterval = this.timeInterval * 0.99;
  };

  return Game;

})();

Character = (function() {
  Character.prototype.CIRCLE = 'circle';

  Character.prototype.TRIANGLE = 'triangle';

  Character.prototype.SQUARE = 'square';

  Character.prototype.TYPES = [Character.CIRCLE, Character.TRIANGLE, Character.SQUARE];

  Character.prototype.POS = [150, 300, 450];

  Character.prototype.PRESSED = {
    37: false,
    38: false,
    39: false,
    40: false
  };

  Character.prototype.myWidth = 30;

  Character.prototype.myHeight = 30;

  Character.prototype.myTop = 400;

  Character.prototype.myPos = 0;

  Character.prototype.$me = null;

  Character.prototype.type = null;

  Character.prototype.myType = null;

  function Character($gameBox, parent) {
    this.$gameBox = $gameBox;
    this.parent = parent;
    this.clearUp = bind(this.clearUp, this);
    this.checkKey = bind(this.checkKey, this);
    this.setLoc = bind(this.setLoc, this);
    this.$me = $('.character');
    this.TYPES = [this.CIRCLE, this.TRIANGLE, this.SQUARE];
    this.initChar();
    this.initKeys();
  }

  Character.prototype.initChar = function() {
    this.setType(2);
    return this.setLoc(0);
  };

  Character.prototype.initKeys = function() {
    $(document).keydown(this.checkKey);
    return $(document).keyup(this.clearUp);
  };

  Character.prototype.setLoc = function(l) {
    if (!((0 <= l && l <= 2))) {
      return;
    }
    this.myPos = l;
    this.$me.css('left', this.POS[l]);
    return this.$me.css('top', this.myTop);
  };

  Character.prototype.setType = function(t) {
    var s;
    console.log(t);
    s = t;
    if (s > 2) {
      s = 0;
    }
    if (s < 0) {
      s = 2;
    }
    this.myType = s;
    this.type = this.TYPES[s];
    this.$me.removeClass(this.CIRCLE);
    this.$me.removeClass(this.SQUARE);
    this.$me.removeClass(this.TRIANGLE);
    return this.$me.addClass(this.type);
  };

  Character.prototype.checkKey = function(e) {
    var key;
    key = e.which;
    switch (key) {
      case 37:
        if (!this.PRESSED[37]) {
          this.setLoc(this.myPos - 1);
        }
        break;
      case 38:
        if (!this.PRESSED[38]) {
          this.setType(this.myType + 1);
        }
        break;
      case 39:
        if (!this.PRESSED[39]) {
          this.setLoc(this.myPos + 1);
        }
        break;
      case 40:
        if (!this.PRESSED[40]) {
          this.setType(this.myType - 1);
        }
    }
    if ((37 <= key && key <= 40)) {
      e.preventDefault();
      return this.PRESSED[key] = true;
    }
  };

  Character.prototype.clearUp = function(e) {
    if (this.PRESSED[e.which]) {
      return this.PRESSED[e.which] = false;
    }
  };

  return Character;

})();

$(document).ready(function() {
  return window.game = new Game();
});
