// Generated by CoffeeScript 1.10.0
var Character, Enemy, Game,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Game = (function() {
  Game.prototype.CIRCLE = 'circle';

  Game.prototype.TRIANGLE = 'triangle';

  Game.prototype.SQUARE = 'square';

  Game.prototype.$car = null;

  Game.prototype.$gameBox = null;

  Game.prototype.timer = null;

  Game.prototype.timeInterval = 1000;

  function Game() {
    this.destroyEnemy = bind(this.destroyEnemy, this);
    this.endGame = bind(this.endGame, this);
    this.generateEnemy = bind(this.generateEnemy, this);
    this.initGame();
  }

  Game.prototype.$ = function(s) {
    return this.$gameBox.find(s);
  };

  Game.prototype.initGame = function() {
    this.$gameBox = $('#gameBox');
    this.$car = new Character(this.$gameBox, this);
    this.timeInterval = 500;
    this.enemyCounter = 1;
    this.enemies = {};
    return this.initTimer();
  };

  Game.prototype.initTimer = function() {
    return this.timer = setTimeout(this.generateEnemy, 1000);
  };

  Game.prototype.generateEnemy = function() {
    this.enemies[this.enemyCounter] = new Enemy(this.$gameBox, this.timeInterval * 2, this.$car, this, this.enemyCounter, this.CIRCLE, this.TRIANGLE, this.SQUARE);
    this.timer = setTimeout(this.generateEnemy, this.timeInterval);
    this.timeInterval = this.timeInterval * 0.99;
    if (this.timeInterval < 800) {
      this.timeInterval = 800;
    }
    return this.enemyCounter += 1;
  };

  Game.prototype.endGame = function() {};

  Game.prototype.destroyEnemy = function(id) {
    this.enemies[id].$me.remove();
    return this.enemies[id] = null;
  };

  return Game;

})();

Character = (function() {
  Character.prototype.CIRCLE = 'circle';

  Character.prototype.TRIANGLE = 'triangle';

  Character.prototype.SQUARE = 'square';

  Character.prototype.TYPES = [Character.CIRCLE, Character.TRIANGLE, Character.SQUARE];

  Character.prototype.POS = [150, 300, 450];

  Character.prototype.PRESSED = {
    37: false,
    38: false,
    39: false,
    40: false
  };

  Character.prototype.myWidth = 30;

  Character.prototype.myHeight = 30;

  Character.prototype.myTop = 400;

  Character.prototype.myPos = 0;

  Character.prototype.$me = null;

  Character.prototype.type = null;

  Character.prototype.myType = null;

  function Character($gameBox, parent) {
    this.$gameBox = $gameBox;
    this.parent = parent;
    this.clearUp = bind(this.clearUp, this);
    this.checkKey = bind(this.checkKey, this);
    this.setLoc = bind(this.setLoc, this);
    this.$me = $('.character');
    this.TYPES = [this.CIRCLE, this.TRIANGLE, this.SQUARE];
    this.initChar();
    this.initKeys();
  }

  Character.prototype.initChar = function() {
    this.setType(2);
    return this.setLoc(0);
  };

  Character.prototype.initKeys = function() {
    $(document).keydown(this.checkKey);
    return $(document).keyup(this.clearUp);
  };

  Character.prototype.setLoc = function(l) {
    if (!((0 <= l && l <= 2))) {
      return;
    }
    this.myPos = l;
    this.$me.css('left', this.POS[l]);
    return this.$me.css('top', this.myTop);
  };

  Character.prototype.setType = function(t) {
    var s;
    console.log(t);
    s = t;
    if (s > 2) {
      s = 0;
    }
    if (s < 0) {
      s = 2;
    }
    this.myType = s;
    this.type = this.TYPES[s];
    this.$me.removeClass(this.CIRCLE);
    this.$me.removeClass(this.SQUARE);
    this.$me.removeClass(this.TRIANGLE);
    return this.$me.addClass(this.type);
  };

  Character.prototype.checkKey = function(e) {
    var key;
    key = e.which;
    switch (key) {
      case 37:
        if (!this.PRESSED[37]) {
          this.setLoc(this.myPos - 1);
        }
        break;
      case 38:
        if (!this.PRESSED[38]) {
          this.setType(this.myType + 1);
        }
        break;
      case 39:
        if (!this.PRESSED[39]) {
          this.setLoc(this.myPos + 1);
        }
        break;
      case 40:
        if (!this.PRESSED[40]) {
          this.setType(this.myType - 1);
        }
    }
    if ((37 <= key && key <= 40)) {
      e.preventDefault();
      return this.PRESSED[key] = true;
    }
  };

  Character.prototype.clearUp = function(e) {
    if (this.PRESSED[e.which]) {
      return this.PRESSED[e.which] = false;
    }
  };

  return Character;

})();

Enemy = (function() {
  Enemy.prototype.CIRCLE = 'circle';

  Enemy.prototype.TRIANGLE = 'triangle';

  Enemy.prototype.SQUARE = 'square';

  Enemy.prototype.endTop = 400;

  Enemy.prototype.POS = [150, 300, 450];

  function Enemy($gameBox, speed, $player, game, id1, val1, val2, val3) {
    this.$gameBox = $gameBox;
    this.speed = speed;
    this.$player = $player;
    this.game = game;
    this.id = id1;
    this.val1 = val1;
    this.val2 = val2;
    this.val3 = val3;
    this.destroyMe = bind(this.destroyMe, this);
    this.checkDestroy = bind(this.checkDestroy, this);
    this.startAnimation = bind(this.startAnimation, this);
    this.createEnemyDiv();
  }

  Enemy.prototype.createEnemyDiv = function() {
    this.$me = $('<div class="enemy">');
    this.$me.css('top', 0);
    this.createEnemyHoles();
    this.$gameBox.append(this.$me);
    return this.startAnimation();
  };

  Enemy.prototype.createEnemyHoles = function() {
    this.myHoles = [this.val1, this.val2, this.val3];
    this.$me.append(this.createEnemyHole(0, this.val1));
    this.$me.append(this.createEnemyHole(1, this.val2));
    return this.$me.append(this.createEnemyHole(2, this.val3));
  };

  Enemy.prototype.createEnemyHole = function(pos, type) {
    var hole;
    hole = $("<div class='enemyHole " + type + "'>");
    hole.css('left', this.POS[pos]);
    return hole;
  };

  Enemy.prototype.startAnimation = function() {
    return this.$me.animate({
      top: this.endTop
    }, this.speed, "linear", this.checkDestroy);
  };

  Enemy.prototype.checkDestroy = function() {
    var pos;
    pos = this.$player.myPos;
    if (this.myHoles[pos] === this.$player.type) {
      return this.destroyMe();
    } else {
      return this.game.endGame();
    }
  };

  Enemy.prototype.destroyMe = function() {
    this.$me.toggle("explode", {
      pieces: 27
    }, "slow");
    return setTimeout(((function(_this) {
      return function() {
        return _this.game.destroyEnemy(_this.id);
      };
    })(this)), 500);
  };

  return Enemy;

})();

$(document).ready(function() {
  return window.game = new Game();
});
